//
//  Test.h
//  分治
//
//  Created by 戴运鹏 on 2018/10/7.
//  Copyright © 2018年 戴运鹏. All rights reserved.
//

#import <Foundation/Foundation.h>



@interface Test : NSObject
    //递归求数组和
- (NSInteger)sum:(NSArray*)array;
    
    //快排
- (NSArray *)quicksort:(NSArray *)array;
    
//二分查找
//- (NSInteger)index

//计算非加权图中的最短路径，可以使用广度优先搜索。计算加权图中的最短路径，可以使用狄克斯特拉算法

//BFS
//用字典表示图，创建一个队列，先将一度关系的节点加入到队列中，队列中节点，以此出队，判断出队的节点是否是要找的目标节点，如果不是，将该节点的关系（二度或更多）也加入队列，继续从队列中出队，找是否是目标节点，直至队列为空。检查节点时，要检查该节点是否被检查过。用一个列表来检查是已被检查过的人。

/*狄克斯特拉算法：(DAG)：只适用于有向无环图；找出图中最便宜的节点，并确保没有到该节点的更便宜的路径。如果有负权边，该算法不可用【包含负权边的图中，可以用贝尔曼-福德算法】
 步骤:1:找出最便宜的节点，即可在最短时间内到达的节点。
    2:更新该节点的邻居的开销。检查是否有前往它们的更短路径，如果有，就更新其开销
    3重复这个过程，直到对图中每个节点都这样做了。
    4：计算最终路径。
 */

/*
 贪婪算法:每步都采用最优的做法。每步都选择局部最优解，最终得到的就是全局最优解。
 */

- (NSSet*)greedyAlgorithm;
@end



































